#!/usr/bin/ruby
$stdout.sync = true

require 'beaneater'
require 'json'
require 'optparse'
require 'yaml'

$options = {}
$options[:server]="localhost:11300"
$options[:control]="mux-control"
$options[:expiry]=3600
$options[:debug]=false
$options[:saveonexit]=false

# retry so many times to deliver the job to the consumers
$options[:retries]=100

# put a job back into the queue after n seconds, when no consumers are registered
$options[:release_delay]=5

opts = OptionParser.new do |opts|
	opts.banner = "Usage: beanstalk-multiplex [options]"
	opts.on('-h', '--host HOST:PORT', 'beanstalk server to connect to (defaults to localhost:11300)') { |v| $options[:server] = v }
	opts.on('-s', '--sourcetube NAME', 'source tube name') { |v| $options[:source] = v }
	opts.on('-c', '--controltube NAME', 'control tube name (defaults to "mux-control")') { |v| $options[:control] = v }
	opts.on('-e', '--expiry seconds', Float, 'time to live for target tubes (defaults to 3600)') { |v| $options[:expiry] = v }
	opts.on('-d', '--debug', 'spit out debug infos') { |v| $options[:debug] = v }
	opts.on('-x', '--saveonexit', 'save the current tubes to control tube on exit') { |v| $options[:saveonexit] = v }
end

opts.parse!

if $options[:source]==nil
	puts "Fatal: No source tube given"
	exit 1
end

class NoTubesError < StandardError
end

# hash of tube-name and expiry point in time
$tubes2put = {}

$beanpool = Beaneater::Pool.new([$options[:server]])
$beanpool.tubes.watch!($options[:control])

def processControlJob(job)
	newTube=job.body.to_s
	$tubes2put[newTube]=Time.now+$options[:expiry]
	$beanpool.tubes.watch($options[:source]) if $tubes2put.length > 0
	puts "keep-alive extended for '#{newTube}' (#{$tubes2put[newTube]})" if $options[:debug]
end

def processJobs!
	puts "Starting to process jobs" if $options[:debug]
	loop do
		begin
			job = $beanpool.tubes.reserve(2)
			if job.tube == $options[:control]
				processControlJob(job)
			elsif job.tube == $options[:source]
				$tubes2put.each do |tubename, expiry|
					if expiry>Time.now
						puts "-> #{tubename}" if $options[:debug]
						$beanpool.tubes[tubename].put(job.body)
					else
						$tubes2put.delete tubename
						puts "expired #{tubename}" if $options[:debug]
					end
				end
				if $tubes2put.length == 0
					$beanpool.tubes.ignore($options[:source])
					raise NoTubesError
				end
			else
				puts "error"
			end
			job.delete
		rescue Beaneater::JobNotReserved, Beaneater::NotFoundError, Beaneater::TimedOutError
			tubes=$beanpool.tubes.watched.map{|t| t.name}.join(", ")
			puts "reserve timed out, watching #{tubes}"
			$tubes2put.each do |tubename, expiry|
				if expiry<Time.now
					$tubes2put.delete tubename
					puts "expired #{tubename}" if $options[:debug]
					if $tubes2put.length == 0
						$beanpool.tubes.ignore($options[:source])
						puts "no tubes left, ignoring source tube" if $options[:debug]
					end
				end
			end
			retry
		rescue NoTubesError
			puts "releasing job #{job.id}, because all tubes expired"
	        job.release(:delay => $options[:release_delay])
		ensure # bury if still reserved
			job.bury if job && job.exists? && job.reserved?
		end
	end
	$beanpool.close
	puts "Finished processing" if $options[:debug]
end

processor = Thread.new do
	processJobs!
end

%w(INT USR1 USR2 TERM TTIN).each do |sig|
	trap sig do
		Thread.kill(processor)
	end
end

processor.join

# use a new connection to the server as the old one may still block
#  if there was no traffic on the tubes.
if $options[:saveonexit]
	beanpool2 = Beaneater::Pool.new([$options[:server]])
	puts "Saving current tubes to #{$options[:control]}"
	control=beanpool2.tubes[$options[:control]]
	$tubes2put.each do |tubename, expiry|
		if expiry>Time.now
			control.put(tubename)
		end
	end
	puts "done"
	beanpool2.close
end

